{
  "openapi": "3.1.0",
  "info": {
    "title": "OpenAPI Unihop Api",
    "description": "A sample API that uses a plant store as an example to demonstrate features in the OpenAPI specification",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.unihop.app/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/orders": {
      "get": {
        "description": "Returns all orders from the system that the user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of results to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Plant response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Plant"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new order in the system",
        "requestBody": {
          "description": "Order to add to the system",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pickup_address": {
                    "type": "object",
                    "properties": {
                      "street": {
                        "type": "string",
                        "description": "Street name of the pickup address."
                      },
                      "city": {
                        "type": "string",
                        "description": "City of the pickup address."
                      },
                      "country": {
                        "type": "string",
                        "description": "Country of the pickup address."
                      },
                      "number": {
                        "type": "string",
                        "description": "Street number of the pickup address."
                      },
                      "secondary_number": {
                        "type": "string",
                        "description": "Apartment or suite number for the pickup address."
                      },
                      "county": {
                        "type": "string",
                        "description": "County of the pickup address."
                      },
                      "state": {
                        "type": "string",
                        "description": "State of the pickup address."
                      },
                      "postal_code": {
                        "type": "string",
                        "description": "Postal or ZIP code of the pickup address."
                      },
                      "latitude": {
                        "type": "number",
                        "description": "Latitude coordinate of the pickup address."
                      },
                      "longitude": {
                        "type": "number",
                        "description": "Longitude coordinate of the pickup address."
                      }
                    },
                    "required": [
                      "street",
                      "city",
                      "country"
                    ],
                    "description": "The address where the order will be picked up."
                  },
                  "pickup_name": {
                    "type": "string",
                    "description": "Name of the contact person at the pickup location."
                  },
                  "pickup_phone_number": {
                    "type": "string",
                    "maxLength": 15,
                    "description": "Phone number of the pickup contact person."
                  },
                  "pickup_instructions": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "Additional instructions for the pickup."
                  },
                    "dropoff_start_time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Preferred start time for dropoff in ISO 8601 format (YYYY-MM-DDTHH:MM:SS±HH:MM)."
                  },
                    "pickup_start_time": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Preferred start time for pickup in ISO 8601 format (YYYY-MM-DDTHH:MM:SS±HH:MM)."
                  },
                  "weight": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Weight of the package in lbs."
                  },
                  "dropoff_address": {
                    "type": "object",
                    "properties": {
                      "street": {
                        "type": "string",
                        "description": "Street name of the dropoff address."
                      },
                      "city": {
                        "type": "string",
                        "description": "City of the dropoff address."
                      },
                      "country": {
                        "type": "string",
                        "description": "Country of the dropoff address."
                      },
                      "number": {
                        "type": "string",
                        "description": "Street number of the dropoff address."
                      },
                      "secondary_number": {
                        "type": "string",
                        "description": "Apartment or suite number for the dropoff address."
                      },
                      "county": {
                        "type": "string",
                        "description": "County of the dropoff address."
                      },
                      "state": {
                        "type": "string",
                        "description": "State of the dropoff address."
                      },
                      "postal_code": {
                        "type": "string",
                        "description": "Postal or ZIP code of the dropoff address."
                      },
                      "latitude": {
                        "type": "number",
                        "description": "Latitude coordinate of the dropoff address."
                      },
                      "longitude": {
                        "type": "number",
                        "description": "Longitude coordinate of the dropoff address."
                      }
                    },
                    "required": [
                      "street",
                      "city",
                      "country"
                    ],
                    "description": "The address where the order will be delivered."
                  },
                  "dropoff_name": {
                    "type": "string",
                    "description": "Name of the contact person at the dropoff location."
                  },
                  "dropoff_phone_number": {
                    "type": "string",
                    "maxLength": 15,
                    "description": "Phone number of the dropoff contact person."
                  },
                  "dropoff_instructions": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "Additional instructions for the dropoff."
                  },
                  "package_minimum_vehicle_size": {
                    "type": "string",
                    "enum": [
                      "BIKE",
                      "MOTORBIKE",
                      "CARGOBIKECARGO",
                      "SEDAN",
                      "CAR",
                      "SUV",
                      "PICKUP_TRUCK",
                      "PICKUP",
                      "VAN",
                      "TRUCK",
                      "ANY"
                    ],
                    "description": "Minimum vehicle type required to transport the package."
                  },
                  "package_delivery_mode": {
                    "type": "string",
                    "enum": [
                      "NOW",
                      "SCHEDULED"
                    ],
                    "description": "Mode of delivery (NOW or SCHEDULED)."
                  },
                  "package_description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "Description of the package contents."
                  },
                  "package_requirements": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "enum": [
                        "PHOTO_PROOF_OF_DELIVERY",
                        "SIGNATURE_PROOF_OF_DELIVERY",
                        "PHOTO_PROOF_OF_PICKUP",
                        "SIGNATURE_PROOF_OF_PICKUP",
                        "AGE_VERIFICATION_ON_DELIVERY",
                        "ID_VERIFICATION_ON_DELIVERY",
                        "BARCODE_SCAN_ON_PICKUP",
                        "BARCODE_SCAN_ON_DROPOFF",
                        "MEET_ON_DELIVERY",
                        "SHIPPING_LABEL",
                        "TWO_PERSON_TEAM",
                        "PINCODE_VERIFICATION",
                        "SCHEDULE_II_CONTROLLED_SUBSTANCES",
                        "ALCOHOL",
                        "PARKING_CHECK_IN",
                        "DISPLAY_BARCODE_ON_PICKUP"
                      ]
                    },
                    "description": "Special delivery or pickup requirements."
                  },
                  "package_pickup_start_time": {
                    "type": "string",
                    "format": "time",
                    "description": "Preferred pickup time for the package (HH:MM:SS)."
                  },
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "description": {
                          "type": "string"
                        },
                        "quantity": {
                          "type": "integer"
                        },
                        "external_id": {
                          "type": "string"
                        },
                        "external_instance_id": {
                          "type": "string"
                        },
                        "price": {
                          "type": "integer"
                        },
                        "barcode": {
                          "type": "string"
                        }
                      },
                      "required": [
                        "name",
                        "quantity"
                      ]
                    },
                    "description": "List of items included in the delivery."
                  },
                  "items_count": {
                    "type": "integer",
                    "description": "Total count of items."
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Customer email address for notifications."
                  },
                  "delivery_date": {
                    "type": "string",
                    "format": "date",
                    "description": "Preferred delivery date (YYYY-MM-DD)."
                  },
                  "delivery_start_time": {
                    "type": "string",
                    "format": "time",
                    "description": "Start time of the delivery window (HH:MM:SS)."
                  },
                  "delivery_end_time": {
                    "type": "string",
                    "format": "time",
                    "description": "End time of the delivery window (HH:MM:SS)."
                  },
                  "package_value": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Monetary value of the package."
                  },
                  "tip": {
                    "type": "number",
                    "minimum": 0,
                    "description": "Optional tip for the delivery."
                  },
                  "partner_reference": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "Custom reference provided by the partner."
                  },
                  "quote": {
                    "type": "boolean",
                    "description": "Indicates whether this is a quote request."
                  },
                  "partner_payload": {
                    "type": "object",
                    "format": "json",
                    "description": "Optional custom payload for partner systems."
                  }
                },
                "required": [
                  "pickup_address",
                  "pickup_name",
                  "dropoff_address",
                  "dropoff_name",
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreated"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{uid}": {
      "get": {
        "description": "Returns a single order by its unique identifier.",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "Unique identifier (UID) of the order to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested order details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The order with the specified UID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/partner/{partner_reference}": {
      "get": {
        "description": "Returns a single order by its unique partner_reference.",
        "parameters": [
          {
            "name": "partner_reference",
            "in": "path",
            "description": "Partner reference of the order to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested order details.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "The order with the specified UID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{uid}/cancel": {
      "post": {
        "description": "Deletes a single ord based on the UID supplied",
        "parameters": [
          {
            "name": "uid",
            "in": "path",
            "description": "UID of the order to delete",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Order deleted",
            "content": {}
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "webhooks": {
    "/plant/webhook": {
      "post": {
        "description": "Information about a new plant added to the store",
        "requestBody": {
          "description": "Plant added to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPlant"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Return a 200 status to indicate that the data was received successfully"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "uid": {
            "type": "string",
            "description": "The unique identifier for the order.",
            "example": "job_123abc456def"
          },
          "status": {
            "type": "string",
            "description": "The current status of the order.",
            "example": "completed"
          },
          "partner_reference": {
            "type": "string",
            "description": "A reference code provided by the partner.",
            "example": "partner_ref_78910"
          },
          "price": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "format": "float",
                "description": "The cost of the order."
              },
              "currency": {
                "type": "string",
                "description": "The currency of the price.",
                "example": "USD"
              }
            }
          },
          "distance": {
            "type": "object",
            "properties": {
              "value": {
                "type": "number",
                "format": "float",
                "description": "The distance for the delivery."
              },
              "unit": {
                "type": "string",
                "description": "The unit of distance.",
                "example": "miles"
              }
            }
          },
          "quote": {
            "type": "boolean",
            "description": "Indicates if the order is a quote.",
            "example": false
          },
          "partner_payload": {
            "type": "object",
            "description": "An arbitrary JSON object for partner-specific data.",
            "nullable": true,
            "example": {
              "custom_field": "custom_value"
            }
          }
        }
      },
      "OrderCreated": {
        "type": "object",
        "description": "Successful response returned after an order is created.",
        "properties": {
          "message": {
            "type": "string",
            "example": "Order created successfully"
          },
          "uid": {
            "type": "string",
            "description": "Unique identifier of the created order",
            "example": "ord_123456"
          },
          "data": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "example": "created"
              },
              "partner_reference": {
                "type": ["string", "null"],
                "example": "partner_xyz_001"
              },
              "price": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "format": "float",
                    "example": 29.99
                  },
                  "currency": {
                    "type": "string",
                    "example": "USD"
                  }
                },
                "required": ["value", "currency"]
              },
              "distance": {
                "type": "object",
                "properties": {
                  "value": {
                    "type": "number",
                    "format": "float",
                    "example": 5.5
                  },
                  "unit": {
                    "type": "string",
                    "example": "miles"
                  }
                },
                "required": ["value", "unit"]
              },
              "quote": {
                "type": "boolean",
                "example": false
              }
            },
            "required": ["status", "price", "distance", "quote"]
          }
        },
        "required": ["message", "uid", "data"]
      },
      "Plant": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "The name of the plant",
            "type": "string"
          },
          "tag": {
            "description": "Tag to specify the type",
            "type": "string"
          }
        }
      },
      "NewPlant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Plant"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "description": "Identification number of the plant",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}
